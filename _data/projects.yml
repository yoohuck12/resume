# Projects
# uncomment the urls if you wish to display them, and add your own URL
#- project: 
#  role: 
#  duration: &mdash; 
#  # url: "#"
#  description: 

- project: TmaxOS) Security Framework of Operating System
  role: Developer
  duration: 2019.05 &mdash; Present
  # url: "#"
  description: <ul style="list-style-type:disc;"><li>Compare Linux Security Modules SELinux and AppArmor. Find out SELinux supports fine-grained control at the system call level, so we select SELinux for our OS.</li> <li>Make and set SELinux labels, type enforcement rules, and process transition rules for newly inserted deamons and programs in TmaxOS.</li><li>Make various SELinux modules for TmaxOS referencing refpolicy.</li><li>For media control, add UDEV rules which executes shell scripts and protect the devices in OS.</li></ul>


- project: TmaxOS) Installer of Operating System
  role: Developer
  duration: 2018.05 &mdash; 2019.05
  # url: "#"
  description: <ul style="list-style-type:disc;"><li>Install TmaxOS on various envrionments such as desktop, notebook, server, virtual environment (VMWare, Virtual box, Hyper-V), embedded computers and dummy computers with no hard drive.</li><li>Install TmaxOS in various configurations including MBR, GPT, BIOS, and UEFI. </li><li>Analyze the UEFI firmware logic when GRUB2 broke the firmware. Find out string compare logic in firmware is written in an unusual way.</li><li>Dual-booting Linux and Windows in various environment using GRUB2.</li><li>Make a Installation app's logic.</li><li>Make a Window's app for installing TmaxOS in window-only environment. Make a cloud server for uploading TmaxOS ISO.</li><li>Apply Secure booting for TmaxOS. Making signed-grub binary and signed-initrd so that deformed OS can't be executed.</li></ul>

- project: TmaxOS) Fixing CMake for dependency tracking, cross-compilation, and build integration.
  role: Developer
  duration: 2018.
  # url: "#"
  description: <ul style="list-style-type:disc;"><li>CMake is an open-source build tools and it is easy to use comparing with using Makefile directly. TmaxOS is compiled with CMake.</li><li>CMake supports add_dependencies keyword for dependency tracking, and setting variables of host/target environment for cross-compile.</li><li>First, many developer uses other libraries, headers, and binaries but they sometimes forget to write dependencies in CMakeLists.txt. We make a script that if build error occurs, then find out the cause CMakeLists.txt, so that we can add.</li><li>Second, we build the source code in 32-bit and 64-bit intel architecture. However, TmaxOS releases 32-bit and 64-bit, and arm will be available soon. Therefore, cross-compilation is essential. What we do is make environment for chroot and re-write CMakeLists.txt files that can output specific target binaries.</li></ul>

- project: TmaxOS) Running Windows Application in linux-based Operating System
  role: Developer
  duration: 2018.02 &mdash; 2018.05
  # url: "#"
  description: <ul style="list-style-type:disc;"><li>Make a compatibility layer for certification using botan open-source library.</li><li>By using debugging tools including API Monitor, OllyDbg, PE Viewer, gdb, and etc, we analysis the EXE file's logic and the output of each API call. Mimics the window's API logic with linux-based code.</li><li>To be compatible with the Kindle app, we make a compatible code of many dlls.</li></ul>

- project: KAIST) Developing Remote Resource Sharing Between Two Mobile Device
  role: Author (Master Thesis)
  duration: 2015.09
  # url: "#"
  description: <ul style="list-style-type:disc;"><li>Make a list of almost all of Android's resource and divide them into two groups, hardware and software resources.</li><li>Android applications use binder IPC mechanism to send a request to use resources.</li><li>If we can expand the binder mechanism between multiple smart phone, then applications can use remote resource as if it is in their own phone.</li><li>Binder's source code is spread from framework level to kernel level. We choose to change the binder's framework code becuase kernel error makes fatal situation and it can make security hole.</li><li>We make remote resource sharing logic which can send and receive binder call through network.</li><li> Additionally, one of core component in binder mechanism is service manager, which finds proper opponent's binder object. We also expand this components to find other device's binder object by communicating with remote service manager.</li><li>Applications can use remote hardware resources like camera, sensors and software resources like calender, contacts. Our evaluation results show that local device can use remote camera at an average speed of 53\% of local and can use remote contacts with almost same as local speed.</li></ul>
##Nowadays there are so many devices around us including smart phone, smart TV, smart watch, and so on. These devices have hardware resources like camera, audio, GPS and logical resources like contacts, calendar, and setting. While most studies focused on sharing hardware resources between devices, little work has been done on sharing both hardware resources and logical resources at the same time.<br> Motivated by this, we developed Remote Resource Sharing(RRS) solution for sharing both hardware and logical resources in an unified way. With RRS, application developers can easily share hardware and logical resources with high-performance. We developed prototype of RRS solution on android platform. Our evaluation results show that local device can use remote camera at an average speed of 53\% of local and can use remote contacts with almost same as local speed.

- project: KAIST) File System scheduler for Hard Disk Drive (HDD)
  role: Developer
  duration: 2014.
  # url: "#"
  description: <ul style="list-style-type:disc;"> <li>Hospitals store magnificant amount of data in their own database. It can be well used through machine learning.</li> <li>However, commonly used disk storage schedulers for HDD are not very suitable to these medical data.</li><li>Medical data's characteristic is that once they are written in disk, they are not changed, and will be accessed squentially by person or disease.</li><li>However, kernel doesn't know about the userspace's data so if scheduler knows how and where to save data, then these data can be accessed efficiently.</li><li>We make new system call for write medical data which accepts parameters like personal information or disease. Then kernel finds the right place to store the data.</li></ul>
#description: Big data is one of the important things in these days, and one of the largest area that needs it is the medical profession. Hospitals have a huge amount of historical data, and technology makes possible to utilize these data for future measurement. However, Solid State Drive (SSD) is still expensive to save the big data, so they store these data into cheap and moderate device like HDD. <br> Still, SSD is more speedy than HDD in the aspect of read and write, we can improve HDD's performance by changing scheduling algorithm to take advantage of the characteristics of medical data. First, when medical data is written, they doesn't changed. Second, related medical data is accessed sequentially. It means if data is written with time locality, then we can maximize the the performance of HDD. Therefore, we changed the kernel file system's write system call and see the steep performance growth.

- project: KAIST) Simulate big.LITTLE sheduling algorithm for real-time OS
  role: Tester
  duration:  2013.
  # url: "#"
  description: <ul style="list-style-type:disc;"> <li>As big.LITTLE architecture comes, mobile can run applications in proper cores so they minimize the consumption without performance degradation.</li><li>However, schedulers for this new architecture is not yet available so we suggest optimal scheduling algorithm for real-time OS.</li></ul>
#description: Intel's big.LITTLE architecture is energy-efficient CPU which has two types of cores, big and little. Big core can run program very fast with high frequency, but it consumes a lots of energy so it is used for performance optimized jobs. On the other hand, little core is slow, but has lower energy consumption curve than big core. We make frequency-energy graph by using ODROID which has power sensor for simulation. <br> Despite the hardware comes, there is no great scheduling for big.LITTLE because it is very hard to consider all the cases to distribute work to the CPU. Therefore, we suggest scheduling idea and simulate the scheduler with Java. We make small amount of jobs and try to prove that is best. In this case, best means all jobs are done in their own deadline and energy-efficient.

- project: Class) Data Mining With Weka
  role: Developer and Project Manager
  duration: 2014.
  # url: "#"
  description: <ul style="list-style-type:disc;"> <li>Weka is open-source data mining tool, and it is used for data regression, clustering, and association rule mining.</li><li>We select Global Database of Events, Language, and Tone (GDELT) which monitors the world's new media and saves data into CSV format.</li><li>The reason why we select them is because we want to answer the questions like 'Which country is danerous for traveling?' 'What will be the future trend of specific events like war?' 'What is the former event of specific event?'</li></ul>
#description: Weka is open-source data mining tool, and it is used for data regression, clustering, and association rule mining. In class, every one present their own idea of what data will be used, what relationship to be discovered, and something like that. I selected Global Database of Events, Language, and Tone (GDELT) which monitors the world's news media and saves data into CSV format. What I want to answer the questions like 'which country is dangerous for traveling?' 'what will be the future trend of specific events like war?' 'what is the former event of specific event?'.

- project: Class) Making Android App for ECG
  role: Developer
  duration: 2013.
  # url: "#"
  description: ECG means electrocardiogram, and it is a data set of the eletrical activity of the heart over time. If we measure ECG, we can detect abnormal situations. Who we focus on is elderly people with smart phones. We collect data and find out some important events like heart attack. <br> What we've done is making a smart phone app to collect and send the ECG and the machine learning server which will receive and learn about events. Server do the following three things. First, by comparing data from one person, it finds out what is wrong. Second, by comparing each other's data, we detect possible patients who can face emergency situations. Third, it learns what is the pre-condition of important events and alert to the people who have possibilities.

- project: Class) Systemcall Bottleneck Analysis
  role: Idea suggestions, Developer
  duration:
  # url: "#"
  description: Linux kernel's application programming interface(API) is called systemcall. There are more than 350 systemcalls in syscall tables. Every application in OS uses this system call directly or indirectly by using libraries like libc. If we find the reason which path of this system call gets slow and improve the performance by soving the bottleneck, then we can make applications faster. <br> We choose the system call write, read, and mmap to analyze.
